
//! Autogenerated weights for `pallet_relay_manager`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-08-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmarker`, CPU: `AMD EPYC 7571`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./bifrost-node
// benchmark
// pallet
// --runtime
// ./bifrost_dev_runtime.compact.compressed.wasm
// --genesis-builder
// none
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// frame-weight-template.hbs
// --output
// weights.rs
// --hostname-override
// benchmarker
// --pallet
// pallet_relay_manager

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_relay_manager`.
pub trait WeightInfo {
	fn set_storage_cache_lifetime() -> Weight;
	fn set_heartbeat_offence_activation() -> Weight;
	fn set_heartbeat_slash_fraction() -> Weight;
	fn set_relayer() -> Weight;
	fn cancel_relayer_set() -> Weight;
	fn heartbeat() -> Weight;
	fn heartbeat_v2() -> Weight;
}

/// Weights for `pallet_relay_manager` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `RelayManager::StorageCacheLifetime` (r:1 w:1)
	/// Proof: `RelayManager::StorageCacheLifetime` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_storage_cache_lifetime() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1489`
		// Minimum execution time: 15_960_000 picoseconds.
		Weight::from_parts(16_631_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `RelayManager::IsHeartbeatOffenceActive` (r:1 w:1)
	/// Proof: `RelayManager::IsHeartbeatOffenceActive` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_heartbeat_offence_activation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1486`
		// Minimum execution time: 16_031_000 picoseconds.
		Weight::from_parts(16_750_000, 1486)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `RelayManager::HeartbeatSlashFraction` (r:1 w:1)
	/// Proof: `RelayManager::HeartbeatSlashFraction` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_heartbeat_slash_fraction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1489`
		// Minimum execution time: 15_921_000 picoseconds.
		Weight::from_parts(16_720_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `RelayManager::BondedController` (r:1 w:0)
	/// Proof: `RelayManager::BondedController` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::RelayerState` (r:2 w:0)
	/// Proof: `RelayManager::RelayerState` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::Round` (r:1 w:0)
	/// Proof: `RelayManager::Round` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::DelayedRelayerSets` (r:1 w:1)
	/// Proof: `RelayManager::DelayedRelayerSets` (`max_values`: None, `max_size`: Some(40014), added: 42489, mode: `MaxEncodedLen`)
	fn set_relayer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154`
		//  Estimated: `43479`
		// Minimum execution time: 52_680_000 picoseconds.
		Weight::from_parts(55_291_000, 43479)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `RelayManager::BondedController` (r:1 w:0)
	/// Proof: `RelayManager::BondedController` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::Round` (r:1 w:0)
	/// Proof: `RelayManager::Round` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::DelayedRelayerSets` (r:1 w:1)
	/// Proof: `RelayManager::DelayedRelayerSets` (`max_values`: None, `max_size`: Some(40014), added: 42489, mode: `MaxEncodedLen`)
	fn cancel_relayer_set() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `190`
		//  Estimated: `43479`
		// Minimum execution time: 42_200_000 picoseconds.
		Weight::from_parts(43_330_000, 43479)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `RelayManager::RelayerState` (r:1 w:1)
	/// Proof: `RelayManager::RelayerState` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::SelectedRelayers` (r:1 w:0)
	/// Proof: `RelayManager::SelectedRelayers` (`max_values`: Some(1), `max_size`: Some(20002), added: 20497, mode: `MaxEncodedLen`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `RelayManager::ReceivedHeartbeats` (r:1 w:1)
	/// Proof: `RelayManager::ReceivedHeartbeats` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	fn heartbeat() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `21487`
		// Minimum execution time: 53_441_000 picoseconds.
		Weight::from_parts(54_470_000, 21487)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `RelayManager::RelayerState` (r:1 w:1)
	/// Proof: `RelayManager::RelayerState` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::SelectedRelayers` (r:1 w:0)
	/// Proof: `RelayManager::SelectedRelayers` (`max_values`: Some(1), `max_size`: Some(20002), added: 20497, mode: `MaxEncodedLen`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `RelayManager::ReceivedHeartbeats` (r:1 w:1)
	/// Proof: `RelayManager::ReceivedHeartbeats` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	fn heartbeat_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `21487`
		// Minimum execution time: 54_550_000 picoseconds.
		Weight::from_parts(55_951_000, 21487)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `RelayManager::StorageCacheLifetime` (r:1 w:1)
	/// Proof: `RelayManager::StorageCacheLifetime` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_storage_cache_lifetime() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1489`
		// Minimum execution time: 15_960_000 picoseconds.
		Weight::from_parts(16_631_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `RelayManager::IsHeartbeatOffenceActive` (r:1 w:1)
	/// Proof: `RelayManager::IsHeartbeatOffenceActive` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_heartbeat_offence_activation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1486`
		// Minimum execution time: 16_031_000 picoseconds.
		Weight::from_parts(16_750_000, 1486)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `RelayManager::HeartbeatSlashFraction` (r:1 w:1)
	/// Proof: `RelayManager::HeartbeatSlashFraction` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_heartbeat_slash_fraction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1489`
		// Minimum execution time: 15_921_000 picoseconds.
		Weight::from_parts(16_720_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `RelayManager::BondedController` (r:1 w:0)
	/// Proof: `RelayManager::BondedController` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::RelayerState` (r:2 w:0)
	/// Proof: `RelayManager::RelayerState` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::Round` (r:1 w:0)
	/// Proof: `RelayManager::Round` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::DelayedRelayerSets` (r:1 w:1)
	/// Proof: `RelayManager::DelayedRelayerSets` (`max_values`: None, `max_size`: Some(40014), added: 42489, mode: `MaxEncodedLen`)
	fn set_relayer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `154`
		//  Estimated: `43479`
		// Minimum execution time: 52_680_000 picoseconds.
		Weight::from_parts(55_291_000, 43479)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `RelayManager::BondedController` (r:1 w:0)
	/// Proof: `RelayManager::BondedController` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::Round` (r:1 w:0)
	/// Proof: `RelayManager::Round` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::DelayedRelayerSets` (r:1 w:1)
	/// Proof: `RelayManager::DelayedRelayerSets` (`max_values`: None, `max_size`: Some(40014), added: 42489, mode: `MaxEncodedLen`)
	fn cancel_relayer_set() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `190`
		//  Estimated: `43479`
		// Minimum execution time: 42_200_000 picoseconds.
		Weight::from_parts(43_330_000, 43479)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `RelayManager::RelayerState` (r:1 w:1)
	/// Proof: `RelayManager::RelayerState` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::SelectedRelayers` (r:1 w:0)
	/// Proof: `RelayManager::SelectedRelayers` (`max_values`: Some(1), `max_size`: Some(20002), added: 20497, mode: `MaxEncodedLen`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `RelayManager::ReceivedHeartbeats` (r:1 w:1)
	/// Proof: `RelayManager::ReceivedHeartbeats` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	fn heartbeat() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `21487`
		// Minimum execution time: 53_441_000 picoseconds.
		Weight::from_parts(54_470_000, 21487)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `RelayManager::RelayerState` (r:1 w:1)
	/// Proof: `RelayManager::RelayerState` (`max_values`: None, `max_size`: Some(87), added: 2562, mode: `MaxEncodedLen`)
	/// Storage: `RelayManager::SelectedRelayers` (r:1 w:0)
	/// Proof: `RelayManager::SelectedRelayers` (`max_values`: Some(1), `max_size`: Some(20002), added: 20497, mode: `MaxEncodedLen`)
	/// Storage: `Session::CurrentIndex` (r:1 w:0)
	/// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `RelayManager::ReceivedHeartbeats` (r:1 w:1)
	/// Proof: `RelayManager::ReceivedHeartbeats` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	fn heartbeat_v2() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `21487`
		// Minimum execution time: 54_550_000 picoseconds.
		Weight::from_parts(55_951_000, 21487)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}