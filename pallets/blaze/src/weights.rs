
//! Autogenerated weights for `pallet_blaze`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-08-08, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmarker`, CPU: `AMD EPYC 7571`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./bifrost-node
// benchmark
// pallet
// --runtime
// ./bifrost_dev_runtime.compact.compressed.wasm
// --genesis-builder
// none
// --pallet
// pallet_blaze
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// frame-weight-template.hbs
// --output
// weight.rs
// --hostname-override
// benchmarker

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_blaze`.
pub trait WeightInfo {
	fn set_activation() -> Weight;
	fn submit_utxos() -> Weight;
	fn broadcast_poll() -> Weight;
	fn submit_fee_rate() -> Weight;
	fn submit_outbound_requests() -> Weight;
	fn force_push_utxos() -> Weight;
	fn remove_outbound_messages() -> Weight;
}

/// Weights for `pallet_blaze` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Blaze::IsActivated` (r:1 w:1)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_activation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1486`
		// Minimum execution time: 22_110_000 picoseconds.
		Weight::from_parts(22_851_000, 1486)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Blaze::IsActivated` (r:1 w:0)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `BtcRegistrationPool::ServiceState` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::ServiceState` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `BtcRegistrationPool::CurrentRound` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BtcRegistrationPool::BondedDescriptor` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::BondedDescriptor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_utxos() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5`
		//  Estimated: `3470`
		// Minimum execution time: 21_140_000 picoseconds.
		Weight::from_parts(21_760_000, 3470)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Blaze::IsActivated` (r:1 w:0)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `Blaze::ConfirmedTxs` (r:1 w:1)
	/// Proof: `Blaze::ConfirmedTxs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Blaze::PendingTxs` (r:1 w:1)
	/// Proof: `Blaze::PendingTxs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `RelayManager::Majority` (r:1 w:0)
	/// Proof: `RelayManager::Majority` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn broadcast_poll() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `71`
		//  Estimated: `3536`
		// Minimum execution time: 48_160_000 picoseconds.
		Weight::from_parts(49_531_000, 3536)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Blaze::IsActivated` (r:1 w:0)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `BtcSocketQueue::MaxFeeRate` (r:1 w:0)
	/// Proof: `BtcSocketQueue::MaxFeeRate` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Blaze::FeeRates` (r:1 w:1)
	/// Proof: `Blaze::FeeRates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_fee_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16`
		//  Estimated: `1501`
		// Minimum execution time: 27_531_000 picoseconds.
		Weight::from_parts(28_110_000, 1501)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Blaze::OutboundPool` (r:1 w:1)
	/// Proof: `Blaze::OutboundPool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_outbound_requests() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 18_800_000 picoseconds.
		Weight::from_parts(19_410_000, 1485)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Blaze::IsActivated` (r:1 w:0)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `Blaze::Utxos` (r:1 w:0)
	/// Proof: `Blaze::Utxos` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BtcRegistrationPool::ServiceState` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::ServiceState` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `BtcRegistrationPool::CurrentRound` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BtcRegistrationPool::BondedDescriptor` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::BondedDescriptor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_push_utxos() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5`
		//  Estimated: `3470`
		// Minimum execution time: 26_540_000 picoseconds.
		Weight::from_parts(27_460_000, 3470)
			.saturating_add(T::DbWeight::get().reads(5_u64))
	}
	/// Storage: `Blaze::IsActivated` (r:1 w:0)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `Blaze::OutboundPool` (r:1 w:1)
	/// Proof: `Blaze::OutboundPool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_outbound_messages() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `34`
		//  Estimated: `1519`
		// Minimum execution time: 18_720_000 picoseconds.
		Weight::from_parts(19_420_000, 1519)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Blaze::IsActivated` (r:1 w:1)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_activation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1486`
		// Minimum execution time: 22_110_000 picoseconds.
		Weight::from_parts(22_851_000, 1486)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Blaze::IsActivated` (r:1 w:0)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `BtcRegistrationPool::ServiceState` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::ServiceState` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `BtcRegistrationPool::CurrentRound` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BtcRegistrationPool::BondedDescriptor` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::BondedDescriptor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_utxos() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5`
		//  Estimated: `3470`
		// Minimum execution time: 21_140_000 picoseconds.
		Weight::from_parts(21_760_000, 3470)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Blaze::IsActivated` (r:1 w:0)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `Blaze::ConfirmedTxs` (r:1 w:1)
	/// Proof: `Blaze::ConfirmedTxs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Blaze::PendingTxs` (r:1 w:1)
	/// Proof: `Blaze::PendingTxs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `RelayManager::Majority` (r:1 w:0)
	/// Proof: `RelayManager::Majority` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn broadcast_poll() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `71`
		//  Estimated: `3536`
		// Minimum execution time: 48_160_000 picoseconds.
		Weight::from_parts(49_531_000, 3536)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Blaze::IsActivated` (r:1 w:0)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `BtcSocketQueue::MaxFeeRate` (r:1 w:0)
	/// Proof: `BtcSocketQueue::MaxFeeRate` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Blaze::FeeRates` (r:1 w:1)
	/// Proof: `Blaze::FeeRates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_fee_rate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16`
		//  Estimated: `1501`
		// Minimum execution time: 27_531_000 picoseconds.
		Weight::from_parts(28_110_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Blaze::OutboundPool` (r:1 w:1)
	/// Proof: `Blaze::OutboundPool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn submit_outbound_requests() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1485`
		// Minimum execution time: 18_800_000 picoseconds.
		Weight::from_parts(19_410_000, 1485)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Blaze::IsActivated` (r:1 w:0)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `Blaze::Utxos` (r:1 w:0)
	/// Proof: `Blaze::Utxos` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BtcRegistrationPool::ServiceState` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::ServiceState` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `BtcRegistrationPool::CurrentRound` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BtcRegistrationPool::BondedDescriptor` (r:1 w:0)
	/// Proof: `BtcRegistrationPool::BondedDescriptor` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_push_utxos() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5`
		//  Estimated: `3470`
		// Minimum execution time: 26_540_000 picoseconds.
		Weight::from_parts(27_460_000, 3470)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
	}
	/// Storage: `Blaze::IsActivated` (r:1 w:0)
	/// Proof: `Blaze::IsActivated` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `Blaze::OutboundPool` (r:1 w:1)
	/// Proof: `Blaze::OutboundPool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_outbound_messages() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `34`
		//  Estimated: `1519`
		// Minimum execution time: 18_720_000 picoseconds.
		Weight::from_parts(19_420_000, 1519)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}